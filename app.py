import streamlit as st
import os
import pandas as pd
from ml.disease_detector import predict_disease

# -------------------------
# ЁЯУМ Load Data
# -------------------------
CROP_DATA_PATH = "data/crop_profiles.csv"
PRICE_DATA_PATH = "data/market_prices.csv"

@st.cache_data
def load_crop_data():
    crops = pd.read_csv(CROP_DATA_PATH)
    prices = pd.read_csv(PRICE_DATA_PATH)

    # тЬЕ Normalize column names (lowercase, strip spaces)
    crops.columns = crops.columns.str.strip().str.lower()
    prices.columns = prices.columns.str.strip().str.lower()

    # тЬЕ Ensure both have "crop" column
    if "crop" not in crops.columns:
        if "crop_name" in crops.columns:
            crops = crops.rename(columns={"crop_name": "crop"})
    if "crop" not in prices.columns:
        if "crop_name" in prices.columns:
            prices = prices.rename(columns={"crop_name": "crop"})

    return crops, prices

crops, prices = load_crop_data()

# -------------------------
# Dummy disease history saver (CSV-based for 5 languages)
# -------------------------
def save_disease_history(
    farmer, crop, disease,
    remedy_en, precautions_en,
    remedy_hi, precautions_hi,
    remedy_ta, precautions_ta,
    remedy_te, precautions_te,
    remedy_ml, precautions_ml
):
    """Mock history saver (writes to CSV)."""
    history_path = "data/disease_history.csv"
    entry = pd.DataFrame([{
        "farmer": farmer,
        "crop": crop,
        "disease": disease,
        "remedy_en": remedy_en, "precautions_en": precautions_en,
        "remedy_hi": remedy_hi, "precautions_hi": precautions_hi,
        "remedy_ta": remedy_ta, "precautions_ta": precautions_ta,
        "remedy_te": remedy_te, "precautions_te": precautions_te,
        "remedy_ml": remedy_ml, "precautions_ml": precautions_ml
    }])

    if os.path.exists(history_path):
        entry.to_csv(history_path, mode="a", header=False, index=False)
    else:
        entry.to_csv(history_path, index=False)

# -------------------------
# ЁЯУМ Streamlit UI
# -------------------------
st.set_page_config(page_title="AgriSaarthi", layout="wide")
st.title("ЁЯМ▒ AgriSaarthi - AI Crop & Disease Assistant")

tab1, tab2, tab3 = st.tabs(["ЁЯМ╛ Crop Recommendation", "ЁЯУ╕ Disease Detection", "ЁЯУЬ Farmer History"])
# Map Indian states to climate zones
state_to_zone = {
    # Tropical
    "Kerala": "Tropical", "Karnataka": "Tropical", "Tamil Nadu": "Tropical",
    "Andhra Pradesh": "Tropical", "Goa": "Tropical", "Maharashtra": "Tropical",
    "West Bengal": "Tropical", "Odisha": "Tropical",

    # Temperate / Subtropical
    "Punjab": "Temperate", "Haryana": "Temperate", "Uttar Pradesh": "Temperate",
    "Madhya Pradesh": "Temperate", "Bihar": "Temperate", "Himachal Pradesh": "Temperate",
    "Jammu & Kashmir": "Temperate",

    # Dry / Arid
    "Rajasthan": "Dry", "Gujarat": "Dry", "Ladakh": "Dry"
}
# -------------------------
# ЁЯМ╛ Crop Recommendation Tab
# -------------------------
with tab1:
    import datetime

    # -------------------
    # Map Indian states to climate zones
    # -------------------
    state_to_zone = {
        "Kerala": "Tropical", "Karnataka": "Tropical", "Tamil Nadu": "Tropical",
        "Andhra Pradesh": "Tropical", "Goa": "Tropical", "Maharashtra": "Tropical",
        "West Bengal": "Tropical", "Odisha": "Tropical",
        "Punjab": "Temperate", "Haryana": "Temperate", "Uttar Pradesh": "Temperate",
        "Madhya Pradesh": "Temperate", "Bihar": "Temperate", "Himachal Pradesh": "Temperate",
        "Jammu & Kashmir": "Temperate",
        "Rajasthan": "Dry", "Gujarat": "Dry", "Ladakh": "Dry"
    }

    # -------------------
    # Map Indian states to language
    # -------------------
    state_to_language = {
        "Punjab": "hi", "Haryana": "hi", "Uttar Pradesh": "hi", "Madhya Pradesh": "hi",
        "Bihar": "hi", "Himachal Pradesh": "hi", "Jammu & Kashmir": "hi", "Rajasthan": "hi", "Gujarat": "hi",
        "Kerala": "ml", "Karnataka": "en", "Tamil Nadu": "ta", "Andhra Pradesh": "te",
        "Goa": "en", "Maharashtra": "en", "West Bengal": "en", "Odisha": "en", "Ladakh": "en"
    }

    # -------------------
    # Multilingual labels
    # -------------------
    lang_dict = {
        "en": {"crop_header":"ЁЯМ╛ Crop Recommendation System","state":"Select State","soil_ph":"Soil pH",
               "water":"Water Availability","recommend_btn":"Recommend Crop","recommended_crops":"Recommended Crops:",
               "profit_chart":"Profit Index Chart","profit_values":"Profit Index Values:",
               "no_match":"No matching crops found for the given criteria.","water_labels":{"Low":"Low","Medium":"Medium","High":"High","Very High":"Very High"},
               "sowing":"Sowing Months","fertilizer":"Fertilizer","profit_index":"Profit Index","carbon":"Carbon Footprint"},
        "hi": {"crop_header":"ЁЯМ╛ рдлрд╝рд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдкреНрд░рдгрд╛рд▓реА","state":"рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ","soil_ph":"рдорд┐рдЯреНрдЯреА рдХрд╛ pH",
               "water":"рдкрд╛рдиреА рдХреА рдЙрдкрд▓рдмреНрдзрддрд╛","recommend_btn":"рдлрд╕рд▓ рд╕реБрдЭрд╛рдПрдБ","recommended_crops":"рдЕрдиреБрд╢рдВрд╕рд┐рдд рдлрд╝рд╕рд▓реЗрдВ:",
               "profit_chart":"рд▓рд╛рдн рд╕реВрдЪрдХрд╛рдВрдХ рдЪрд╛рд░реНрдЯ","profit_values":"рд▓рд╛рдн рд╕реВрдЪреА",
               "no_match":"рджрд┐рдП рдЧрдП рдорд╛рдкрджрдВрдбреЛрдВ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдЙрдкрдпреБрдХреНрдд рдлрд╝рд╕рд▓ рдирд╣реАрдВ рдорд┐рд▓реАред","water_labels":{"Low":"рдХрдо","Medium":"рдордзреНрдпрдо","High":"рдЕрдзрд┐рдХ","Very High":"рдмрд╣реБрдд рдЕрдзрд┐рдХ"},
               "sowing":"рдмреЛрдЖрдИ рдХрд╛ рд╕рдордп","fertilizer":"рдЙрд░реНрд╡рд░рдХ","profit_index":"рд▓рд╛рдн рд╕реВрдЪрдХрд╛рдВрдХ","carbon":"рдХрд╛рд░реНрдмрди рдкрджрдЪрд┐рд╣реНрди"},
        "ta": {"crop_header":"ЁЯМ╛ рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ роЕроорпИрокрпНрокрпБ","state":"рооро╛роиро┐ро▓роорпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН","soil_ph":"роорогрпНрогро┐ройрпН pH",
               "water":"роирпАро░ Availability","recommend_btn":"рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ роЪрпЖропрпНропро╡рпБроорпН","recommended_crops":"рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ рокропро┐ро░рпНроХро│рпН:",
               "profit_chart":"рокропройрпН роХрпБро▒ро┐ропрпАроЯрпНроЯрпБ ро╡ро░рпИрокроЯроорпН","profit_values":"рокропройрпН роородро┐рокрпНрокрпБроХро│рпН:",
               "no_match":"роХро╛рогрокрпНрокроЯрпБроорпН рокрпКро░рпБроирпНродроХрпНроХрпВроЯро┐роп рокропро┐ро░рпНроХро│рпН роЗро▓рпНро▓рпИ.","water_labels":{"Low":"роХрпБро▒рпИроирпНрод","Medium":"роородро┐ропроорпН","High":"роЕродро┐роХ","Very High":"рооро┐роХ роЕродро┐роХ"},
               "sowing":"роироЯрпНроЯрпБроорпН рооро╛родроЩрпНроХро│рпН","fertilizer":"роЙро░роорпН","profit_index":"рокропройрпН роХрпБро▒ро┐ропрпАроЯрпБ","carbon":"роХро╛ро░рпНрокройрпН рокро╛родро┐рокрпНрокрпБ"},
        "te": {"crop_header":"ЁЯМ╛ р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р░╕р▒Бр░▓ р░╡р▒Нр░пр░╡р░╕р▒Нр░е","state":"р░░р░╛р░Ьр▒Нр░пр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐","soil_ph":"р░ор░Яр▒Нр░Яр░┐р░кр▒Ар░╣р▒Жр░Ър▒Н",
               "water":"р░ир▒Ар░Яр░┐ р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Б","recommend_btn":"р░кр░Вр░Яр░ир▒Б р░╕р░┐р░лр░╛р░░р░╕р▒Б р░Ър▒Зр░пр░Вр░бр░┐","recommended_crops":"р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░Ър▒Зр░╕р░┐р░и р░кр░Вр░Яр░▓р▒Б:",
               "profit_chart":"р░▓р░╛р░н р░╕р▒Вр░Ър░┐р░Х р░Ър░╛р░░р▒Нр░Яр▒Н","profit_values":"р░▓р░╛р░н р░╕р▒Вр░Ър░┐р░Х р░╡р░┐р░▓р▒Бр░╡р░▓р▒Б:",
               "no_match":"р░Зр░Ър▒Нр░Ър░┐р░и р░кр▒Нр░░р░ор░╛р░гр░╛р░▓р░Хр▒Б р░╕р░░р░┐р░кр░бр▒З р░кр░Вр░Яр░▓р▒Б р░▓р░нр░┐р░Вр░Ър░▓р▒Зр░жр▒Б.","water_labels":{"Low":"р░др░Хр▒Нр░Хр▒Бр░╡","Medium":"р░ор░зр▒Нр░пр░╕р▒Нр░е","High":"р░Ор░Хр▒Нр░Хр▒Бр░╡","Very High":"р░Ър░╛р░▓р░╛ р░Ор░Хр▒Нр░Хр▒Бр░╡"},
               "sowing":"р░ир░╛р░Яр▒З р░ир▒Жр░▓р░▓р▒Б","fertilizer":"р░░р░╕р░╛р░пр░и р░кр▒Бр░╖р▒Нр░Хр░░р░г","profit_index":"р░▓р░╛р░н р░╕р▒Вр░Ър░┐р░Х","carbon":"р░Хр░╛р░░р▒Нр░мр░ир▒Н р░кр░╛р░жр░Ър░┐р░╣р▒Нр░ир░В"},
        "ml": {"crop_header":"ЁЯМ╛ р┤лр┤╕р╡╜ р┤╢р┤┐р┤кр┤╛р╡╝р┤╢р┤╛ р┤╕р┤Вр┤╡р┤┐р┤зр┤╛р┤ир┤В","state":"р┤╕р┤Вр┤╕р╡Нр┤ер┤╛р┤ир┤В р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х","soil_ph":"р┤ор┤гр╡Нр┤гр┤┐р┤ир╡Нр┤▒р╡Ж pH",
               "water":"р┤Ьр┤▓ р┤▓р┤нр╡Нр┤пр┤д","recommend_btn":"р┤лр┤╕р╡╜ р┤╢р┤┐р┤кр┤╛р╡╝р┤╢ р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х","recommended_crops":"р┤╢р┤┐р┤кр┤╛р╡╝р┤╢ р┤Ър╡Жр┤пр╡Нр┤д р┤лр┤╕р┤▓р╡Бр┤Хр╡╛:",
               "profit_chart":"р┤▓р┤╛р┤н р┤╕р╡Вр┤Ър┤┐р┤Х р┤Ър┤╛р╡╝р┤Яр╡Нр┤Яр╡Н","profit_values":"р┤▓р┤╛р┤н р┤╕р╡Вр┤Ър┤┐р┤Х р┤ор╡Вр┤▓р╡Нр┤пр┤Щр╡Нр┤Щр╡╛:",
               "no_match":"р┤ир╡╜р┤Хр┤┐р┤п р┤ор┤╛р┤ир┤жр┤гр╡Нр┤бр┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤пр╡Лр┤Ьр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤и р┤лр┤╕р┤▓р╡Бр┤Хр╡╛ р┤Тр┤ир╡Нр┤ир╡Бр┤В р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤┐р┤пр┤┐р┤▓р╡Нр┤▓.","water_labels":{"Low":"р┤Хр╡Бр┤▒р┤Юр╡Нр┤Юр┤др╡Н","Medium":"р┤ор┤зр╡Нр┤пр┤ор┤В","High":"р┤Ер┤зр┤┐р┤Хр┤В","Very High":"р┤╡р┤│р┤░р╡Ж р┤Ер┤зр┤┐р┤Хр┤В"},
               "sowing":"р┤ир┤Яр╡Нр┤Яр╡Б р┤ор┤╛р┤╕р┤Щр╡Нр┤Щр╡╛","fertilizer":"р┤Йр╡╝р┤╡р┤░р┤В","profit_index":"р┤▓р┤╛р┤н р┤╕р╡Вр┤Ър┤┐р┤Х","carbon":"р┤Хр┤╛р╡╝р┤мр╡║ р┤лр╡Бр┤Яр╡Нр┤кр╡Нр┤░р┤┐р┤ир╡Нр┤▒р╡Н"}
    }

    # -------------------
    # Session state to track previous state & language
    # -------------------
    if "prev_state" not in st.session_state:
        st.session_state.prev_state = None
    if "lang_override" not in st.session_state:
        st.session_state.lang_override = "en"

    # -------------------
    # State selection
    # -------------------
    state = st.selectbox("State", list(state_to_zone.keys()), key="state_select")
    climate_zone = state_to_zone[state]

    # Reset language override if state changed
    if st.session_state.prev_state != state:
        st.session_state.prev_state = state
        st.session_state.lang_override = state_to_language.get(state, "en")

    # -------------------
    # Language override radio
    # -------------------
    target_lang = st.radio(
        "Language / рднрд╛рд╖рд╛ / роорпКро┤ро┐ / р░нр░╛р░╖ / р┤нр┤╛р┤╖",
        options=["en","hi","ta","te","ml"],
        index=["en","hi","ta","te","ml"].index(st.session_state.lang_override),
        format_func=lambda x: {"en":"English","hi":"рд╣рд┐рдВрджреА","ta":"родрооро┐ро┤рпН","te":"р░др▒Жр░▓р▒Бр░Чр▒Б","ml":"р┤ор┤▓р┤пр┤╛р┤│р┤В"}[x],
        horizontal=True,
        key="lang_radio"
    )

    # Update session state if user manually changes radio
    st.session_state.lang_override = target_lang
    t = lang_dict[target_lang]

    st.header(t["crop_header"])

    # -------------------
    # Farmer inputs
    # -------------------
    soil_ph = st.slider("ЁЯМ▒ "+t["soil_ph"],4.5,9.0,6.5)
    water_options = list(t["water_labels"].values()) if target_lang in ["hi","ta","te","ml"] else list(t["water_labels"].keys())
    water = st.selectbox("ЁЯТз "+t["water"], water_options)

    water_map = {
        "рдХрдо":"Low","рдордзреНрдпрдо":"Medium","рдЕрдзрд┐рдХ":"High","рдмрд╣реБрдд рдЕрдзрд┐рдХ":"Very High",
        "роХрпБро▒рпИроирпНрод":"Low","роородро┐ропроорпН":"Medium","роЕродро┐роХ":"High","рооро┐роХ роЕродро┐роХ":"Very High",
        "р░др░Хр▒Нр░Хр▒Бр░╡":"Low","р░ор░зр▒Нр░пр░╕р▒Нр░е":"Medium","р░Ор░Хр▒Нр░Хр▒Бр░╡":"High","р░Ър░╛р░▓р░╛ р░Ор░Хр▒Нр░Хр▒Бр░╡":"Very High",
        "р┤Хр╡Бр┤▒р┤Юр╡Нр┤Юр┤др╡Н":"Low","р┤ор┤зр╡Нр┤пр┤ор┤В":"Medium","р┤Ер┤зр┤┐р┤Хр┤В":"High","р┤╡р┤│р┤░р╡Ж р┤Ер┤зр┤┐р┤Хр┤В":"Very High",
        "Low":"Low","Medium":"Medium","High":"High","Very High":"Very High"
    }
    water_value = water_map.get(water, water)

    # -------------------
    # Season detection
    # -------------------
    month = datetime.datetime.now().month
    season = "Rainy / Monsoon" if month in [6,7,8,9,10] else "Winter" if month in [11,12,1,2,3] else "Summer"

    # -------------------
    # Recommend Crop
    # -------------------
    if st.button("тЬЕ "+t["recommend_btn"]):
        filtered = crops[
            (crops["ph_min"]<=soil_ph)&
            (crops["ph_max"]>=soil_ph)&
            (crops["water_need"].str.lower()==water_value.lower())&
            (crops["climate_zone"].str.lower()==climate_zone.lower())&
            (crops["season"].str.lower()==season.lower())
        ]

        if not filtered.empty:
            result = pd.merge(filtered, prices, on="crop", how="inner")
            result["Profit_Index"] = result["base_yield"]*result["base_price"]
            result = result.sort_values(by="Profit_Index", ascending=False).head(3)

            st.success("тЬЕ "+t["recommended_crops"])

            for _, row in result.iterrows():
                if target_lang=="hi": crop_name=row.get("crop_hi",row["crop"])
                elif target_lang=="ta": crop_name=row.get("crop_ta",row["crop"])
                elif target_lang=="te": crop_name=row.get("crop_te",row["crop"])
                elif target_lang=="ml": crop_name=row.get("crop_ml",row["crop"])
                else: crop_name=row["crop"]

                water_label=t["water_labels"].get(row["water_need"],row["water_need"])
                st.write(f"**{crop_name}**")
                st.write(f"ЁЯТ░ {t['profit_index']}: {row['Profit_Index']}")
                st.write(f"ЁЯТз {t['water']}: {water_label}")
                st.write(f"ЁЯМН {t['carbon']}: {row['carbon_footprint']}")
                st.write(f"ЁЯЧУя╕П {t['sowing']}: {row.get('sowing_months','N/A')}")
                st.write(f"ЁЯзк {t['fertilizer']}: {row.get('fertilizer','N/A')}")
                st.markdown("---")

            # Profit Chart
            chart_labels = [row.get(f"crop_{target_lang}", row["crop"]) if target_lang in ["hi","ta","te","ml"] else row["crop"] for _, row in result.iterrows()]
            chart_data = pd.DataFrame({'Crop': chart_labels,'Profit_Index':result['Profit_Index']})
            chart_data = chart_data.set_index('Crop').sort_values(by='Profit_Index',ascending=False)
            st.subheader("ЁЯУК "+t["profit_chart"])
            st.bar_chart(chart_data)
            st.write("ЁЯТ░ "+t["profit_values"])
            st.table(chart_data)

        else:
            st.error("тЪая╕П "+t["no_match"])

# -------------------------
# ЁЯУ╕ Disease Detection Tab
# -------------------------
with tab2:
    st.header("ЁЯУ╕ Plant Disease Detection")

    # Farmer name input
    farmer_name = st.text_input(
        "Farmer Name / рдХрд┐рд╕рд╛рди рдХрд╛ рдирд╛рдо / ро╡ро┐ро╡роЪро╛ропро┐ рокрпЖропро░рпН / р░░р▒Ир░др▒Б р░кр▒Зр░░р▒Б / р┤лр┤╛р╡╝р┤ор╡╝ р┤кр╡Зр┤░р╡Н"
    )
    if not farmer_name:
        st.warning("Please enter your name to proceed.")
        st.stop()

    # Language selection
    lang = st.radio(
        "Choose language / рднрд╛рд╖рд╛ / роорпКро┤ро┐ / р░нр░╛р░╖ / р┤нр┤╛р┤╖:",
        ["en", "hi", "ta", "te", "ml"],
        format_func=lambda x: {
            "en": "English",
            "hi": "рд╣рд┐рдВрджреА",
            "ta": "родрооро┐ро┤рпН",
            "te": "р░др▒Жр░▓р▒Бр░Чр▒Б",
            "ml": "р┤ор┤▓р┤пр┤╛р┤│р┤В"
        }[x]
    )

    # Leaf image uploader
    uploaded_file = st.file_uploader(
        "Upload a leaf image", type=["jpg", "jpeg", "png"]
    )

    if uploaded_file is not None:
        img_path = os.path.join("data", "uploaded_leaf.jpg")
        with open(img_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        st.image(img_path, caption="Uploaded Leaf", use_container_width=True)

        with st.spinner("ЁЯФН Analyzing leaf image..."):
            from ml.disease_detector import predict_disease  # adjust import path if needed
            result = predict_disease(img_path, lang=lang)

        st.success("тЬЕ Prediction Complete!")

        # -------------------
        # Language-based display
        # -------------------
        if lang == "hi":
            disease_display = result.get("disease_hi", result["disease"]).replace("_", " ")
            crop_display = result.get("crop_hi", result["crop"])
            remedy_display = result.get("remedy_hi", result["remedy"])
            precautions_display = result.get("precautions_hi", result["precautions"])
        elif lang == "ta":
            disease_display = result.get("disease_ta", result["disease"]).replace("_", " ")
            crop_display = result.get("crop_ta", result["crop"])
            remedy_display = result.get("remedy_ta", result["remedy"])
            precautions_display = result.get("precautions_ta", result["precautions"])
        elif lang == "te":
            disease_display = result.get("disease_te", result["disease"]).replace("_", " ")
            crop_display = result.get("crop_te", result["crop"])
            remedy_display = result.get("remedy_te", result["remedy"])
            precautions_display = result.get("precautions_te", result["precautions"])
        elif lang == "ml":
            disease_display = result.get("disease_ml", result["disease"]).replace("_", " ")
            crop_display = result.get("crop_ml", result["crop"])
            remedy_display = result.get("remedy_ml", result["remedy"])
            precautions_display = result.get("precautions_ml", result["precautions"])
        else:
            # default English
            disease_display = result["disease"].replace("_", " ")
            crop_display = result["crop"]
            remedy_display = result["remedy"]
            precautions_display = result["precautions"]

        # -------------------
        # Display results
        # -------------------
        st.subheader(f"Disease: {disease_display}")
        st.write(f"ЁЯМ╛ Crop: **{crop_display}**")
        st.write(f"ЁЯТК Remedy: {remedy_display}")
        st.write(f"тЪая╕П Precautions: {precautions_display}")
        st.write(f"ЁЯФО Confidence: {result.get('confidence', 0)*100:.2f}%")

        # -------------------
        # Save to history
        # -------------------
        save_disease_history(
            farmer_name,
            crop_display,
            disease_display,
            result.get("remedy_en", ""),
            result.get("precautions_en", ""),
            result.get("remedy_hi", ""),
            result.get("precautions_hi", ""),
            result.get("remedy_ta", ""),
            result.get("precautions_ta", ""),
            result.get("remedy_te", ""),
            result.get("precautions_te", ""),
            result.get("remedy_ml", ""),
            result.get("precautions_ml", "")
        )
        st.info("ЁЯУМ Saved to history!")
# -------------------------
# ЁЯУЬ Farmer History Tab
# -------------------------
with tab3:
    st.header("ЁЯУЬ Farmer Disease History")

    def get_disease_history():
        history_path = "data/disease_history.csv"
        if os.path.exists(history_path):
            df = pd.read_csv(history_path)
            return df
        else:
            return pd.DataFrame()

    history_df = get_disease_history()

    if history_df.empty:
        st.info("No history found yet.")
    else:
        st.dataframe(history_df)